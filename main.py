from database import DatabaseManager
from crud import WatermelonCRUD
import sys

def print_watermelon_info(watermelon):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–±—É–∑–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    print(f"\n{'='*50}")
    print(f"üçâ –ê–†–ë–£–ó #{watermelon.id}")
    print(f"{'='*50}")
    print(f"–°–æ—Ä—Ç: {watermelon.variety}")
    print(f"–í–µ—Å: {watermelon.weight} –∫–≥")
    print(f"–°–ª–∞–¥–æ—Å—Ç—å: {watermelon.sweetness}/10")
    print(f"–°–ø–µ–ª–æ—Å—Ç—å: {watermelon.ripeness}")
    print(f"–¶–µ–Ω–∞: {watermelon.price} —Ä—É–±/–∫–≥")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {watermelon.total_price():.2f} —Ä—É–±")
    print(f"–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π: {'–î–∞' if watermelon.is_organic else '–ù–µ—Ç'}")
    print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {watermelon.supplier}")
    print(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {watermelon.quality_score()}/25")
    print(f"{'='*50}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    db.create_database()
    db.init_sample_data()
    
    crud = WatermelonCRUD()
    
    while True:
        print("\n" + "="*60)
        print("üéØ –°–ò–°–¢–ï–ú–ê –í–´–ë–û–†–ê –ê–†–ë–£–ó–û–í")
        print("="*60)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—Ä–±—É–∑—ã")
        print("2. –ù–∞–π—Ç–∏ —Å–ª–∞–¥–∫–∏–µ –∞—Ä–±—É–∑—ã (—Å–ª–∞–¥–æ—Å—Ç—å ‚â• 7)")
        print("3. –ù–∞–π—Ç–∏ –ø–æ –≤–µ—Å—É")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä–±—É–∑—ã")
        print("5. –ù–∞–π—Ç–∏ –ø–æ —Å–æ—Ä—Ç—É")
        print("6. –õ—É—á—à–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É")
        print("7. –ë—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
        print("8. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞—Ä–±—É–∑")
        print("9. –û–±–Ω–æ–≤–∏—Ç—å –∞—Ä–±—É–∑")
        print("10. –£–¥–∞–ª–∏—Ç—å –∞—Ä–±—É–∑")
        print("0. –í—ã—Ö–æ–¥")
        print("="*60)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == "1":
            print("\nüìã –í–°–ï –ê–†–ë–£–ó–´:")
            watermelons = crud.get_all_watermelons()
            for wm in watermelons:
                print_watermelon_info(wm)
                
        elif choice == "2":
            print("\nüç¨ –°–õ–ê–î–ö–ò–ï –ê–†–ë–£–ó–´:")
            watermelons = crud.find_by_sweetness(7)
            for wm in watermelons:
                print_watermelon_info(wm)
                
        elif choice == "3":
            try:
                min_w = float(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–∫–≥): "))
                max_w = float(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–∫–≥): "))
                watermelons = crud.find_by_weight_range(min_w, max_w)
                print(f"\n‚öñÔ∏è –ê–†–ë–£–ó–´ –í–ï–°–û–ú –û–¢ {min_w} –î–û {max_w} –ö–ì:")
                for wm in watermelons:
                    print_watermelon_info(wm)
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
                
        elif choice == "4":
            print("\nüå± –û–†–ì–ê–ù–ò–ß–ï–°–ö–ò–ï –ê–†–ë–£–ó–´:")
            watermelons = crud.find_organic()
            for wm in watermelons:
                print_watermelon_info(wm)
                
        elif choice == "5":
            variety = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞: ").strip()
            watermelons = crud.find_by_variety(variety)
            print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –°–û–†–¢–£ '{variety}':")
            for wm in watermelons:
                print_watermelon_info(wm)
                
        elif choice == "6":
            print("\nüèÜ –õ–£–ß–®–ò–ï –ü–û –ö–ê–ß–ï–°–¢–í–£:")
            watermelons = crud.get_best_quality()
            for i, wm in enumerate(watermelons, 1):
                print(f"\nüèÖ –ú–ï–°–¢–û #{i}:")
                print_watermelon_info(wm)
                
        elif choice == "7":
            try:
                max_price = float(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–≥: "))
                watermelons = crud.get_cheapest_options(max_price)
                print(f"\nüí∞ –ë–Æ–î–ñ–ï–¢–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ (–¥–æ {max_price} —Ä—É–±/–∫–≥):")
                for wm in watermelons:
                    print_watermelon_info(wm)
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É!")
                
        elif choice == "8":
            print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–†–ë–£–ó–ê:")
            try:
                variety = input("–°–æ—Ä—Ç: ")
                weight = float(input("–í–µ—Å (–∫–≥): "))
                sweetness = int(input("–°–ª–∞–¥–æ—Å—Ç—å (1-10): "))
                ripeness = input("–°–ø–µ–ª–æ—Å—Ç—å: ")
                price = float(input("–¶–µ–Ω–∞ –∑–∞ –∫–≥: "))
                organic = input("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π (–¥–∞/–Ω–µ—Ç): ").lower() == "–¥–∞"
                supplier = input("–ü–æ—Å—Ç–∞–≤—â–∏–∫: ")
                
                crud.add_watermelon(variety, weight, sweetness, ripeness, price, organic, supplier)
                print("‚úÖ –ê—Ä–±—É–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
                
        elif choice == "9":
            try:
                wm_id = int(input("ID –∞—Ä–±—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: "))
                print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è):")
                
                updates = {}
                variety = input("–°–æ—Ä—Ç: ")
                if variety: updates['variety'] = variety
                
                weight = input("–í–µ—Å (–∫–≥): ")
                if weight: updates['weight'] = float(weight)
                
                sweetness = input("–°–ª–∞–¥–æ—Å—Ç—å (1-10): ")
                if sweetness: updates['sweetness'] = int(sweetness)
                
                ripeness = input("–°–ø–µ–ª–æ—Å—Ç—å: ")
                if ripeness: updates['ripeness'] = ripeness
                
                price = input("–¶–µ–Ω–∞ –∑–∞ –∫–≥: ")
                if price: updates['price'] = float(price)
                
                organic = input("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π (–¥–∞/–Ω–µ—Ç): ")
                if organic: updates['is_organic'] = organic.lower() == "–¥–∞"
                
                supplier = input("–ü–æ—Å—Ç–∞–≤—â–∏–∫: ")
                if supplier: updates['supplier'] = supplier
                
                if updates:
                    crud.update_watermelon(wm_id, **updates)
                else:
                    print("‚ÑπÔ∏è  –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                    
            except (ValueError, TypeError):
                print("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
                
        elif choice == "10":
            try:
                wm_id = int(input("ID –∞—Ä–±—É–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                if crud.delete_watermelon(wm_id):
                    print("‚úÖ –ê—Ä–±—É–∑ —É–¥–∞–ª–µ–Ω!")
                else:
                    print("‚ùå –ê—Ä–±—É–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
                
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            crud.close()
            sys.exit()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()